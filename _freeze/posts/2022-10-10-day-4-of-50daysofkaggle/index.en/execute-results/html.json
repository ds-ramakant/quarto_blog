{
  "hash": "aef0da8e675556793eff8a8e0e4a3e55",
  "result": {
    "markdown": "---\ntitle: 'Day 4 of #50daysofkaggle'\nauthor: 'Me'\ndate: '2022-10-10'\nslug: day-4-of-50daysofkaggle\ncategories: [kaggle]\ntags: [50daysofkaggle, kaggle, machinelearning, python]\nauthors: [Me]\nlastmod: '2022-10-10T11:28:37+05:30'\nfeatured: no\nprojects: []\nformat:\n  html:\n    code-fold: true\n    code-block-border-left: true\n    toc: true\n---\n\n# Day 4: The Titanic Dataset\n\nPreviously I managed to download the titanic zip file using the kaggle api and extract two datasets `train` and `test` .\n\n## Importing libraries and reading the data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport numpy as np\nimport pandas as pd\nimport kaggle \nimport zipfile \n\nkaggle.api.authenticate()\n\nkaggle.api.competition_download_files(\"titanic\", path = \".\")\n\nzf = zipfile.ZipFile(\"titanic.zip\")\ntrain = pd.read_csv(zf.open(\"train.csv\"))\ntest = pd.read_csv(zf.open(\"test.csv\"))\n```\n:::\n\n\n## Rearranging `train` dataset\n\nLets see what we have here in the `train` data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ntrain.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nChecking more details on `train` columns.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ntrain.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n```\n:::\n:::\n\n\n`PassengerID` is the unique identifier for each row while `Survived` is the column to be predicted. Finding only the numeric columns and dropping the above two (ref - [this link](https://thispointer.com/python-how-to-remove-multiple-elements-from-list/#:~:text=Remove%20Multiple%20elements%20from%20list%20by%20index%20range%20using%20del,can%20use%20del%20keyword%20i.e.&text=It%20will%20delete%20the%20elements,from%20index1%20to%20index2%20%E2%80%93%201.))\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnum_col = train.select_dtypes(include=np.number).columns.tolist()\n\ndel num_col[0:2] #.remove() can remove only 1 item. so for more than 1, use for loop \nselect_col = num_col\n```\n:::\n\n\nAmong the string columns, only `Sex` and `Embarked` are relevant for our analysis. [Ref - selecting columns by intersection](https://stackoverflow.com/questions/40636514/selecting-columns-by-list-and-columns-are-subset-of-list)\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstr_col= [\"Sex\", \"Embarked\", \"Survived\"]\nstr_col\n\n\nselect_col.extend(str_col)\nselect_col\n\ntrain_eda= train[train.columns.intersection(select_col)]\n\ntrain_eda.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 8 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Survived  891 non-null    int64  \n 1   Pclass    891 non-null    int64  \n 2   Sex       891 non-null    object \n 3   Age       714 non-null    float64\n 4   SibSp     891 non-null    int64  \n 5   Parch     891 non-null    int64  \n 6   Fare      891 non-null    float64\n 7   Embarked  889 non-null    object \ndtypes: float64(2), int64(4), object(2)\nmemory usage: 55.8+ KB\n```\n:::\n:::\n\n\n## EDA\n\nSeems like the older folks were luckier than the younger ones\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.catplot(data = train_eda, x = \"Age\", y = \"Fare\", hue = \"Survived\")\n            \nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index.en_files/figure-html/cell-7-output-1.png){width=537 height=468}\n:::\n:::\n\n\nDistinction between Class 1 and Class 3 is clear - poorer folks in Class 3 were younger (mean being just under 30 years) than the richer folks in Class 1\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nplt.clf()\nsns.boxplot(data = train_eda, y = \"Age\", x = \"Pclass\", hue = \"Survived\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index.en_files/figure-html/cell-8-output-1.png){width=585 height=422}\n:::\n:::\n\n\nBelow graph shows us that among the survivors, there were a lot more women than men survived the disaster.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nplt.clf()\nplot = sns.FacetGrid(data = train_eda, col = \"Survived\", hue = \"Sex\", col_wrap = 2)\nplot.map(sns.scatterplot, \"Age\", \"Fare\")\nplot.axes[-1].legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index.en_files/figure-html/cell-9-output-2.png){width=565 height=275}\n:::\n:::\n\n\nWe continue to notice the clearer skew towards Class 1 (richer) compared to Class 3 (poorer)\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nplt.clf()\nplot = sns.FacetGrid(data = train_eda, col = \"Survived\", hue = \"Pclass\", col_wrap = 2)\nplot.map(sns.scatterplot, \"Age\", \"Fare\")\nplot.axes[-1].legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index.en_files/figure-html/cell-10-output-2.png){width=565 height=275}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplt.clf()\nplot = sns.FacetGrid(data = train_eda, col = \"Survived\", hue = \"SibSp\", col_wrap = 2)\nplot.map(sns.scatterplot, \"Age\", \"Fare\")\nplot.axes[-1].legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 672x480 with 0 Axes>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](index.en_files/figure-html/cell-11-output-2.png){width=565 height=275}\n:::\n:::\n\n\n## roughspace\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ntrain_df = pd.get_dummies(train_eda, columns = [\"Sex\", \"Embarked\"])\n\ntrain_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 11 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   Survived    891 non-null    int64  \n 1   Pclass      891 non-null    int64  \n 2   Age         714 non-null    float64\n 3   SibSp       891 non-null    int64  \n 4   Parch       891 non-null    int64  \n 5   Fare        891 non-null    float64\n 6   Sex_female  891 non-null    uint8  \n 7   Sex_male    891 non-null    uint8  \n 8   Embarked_C  891 non-null    uint8  \n 9   Embarked_Q  891 non-null    uint8  \n 10  Embarked_S  891 non-null    uint8  \ndtypes: float64(2), int64(4), uint8(5)\nmemory usage: 46.2 KB\n```\n:::\n:::\n\n\nAnd day 2 comes to an endü§∑‚Äç‚ôÇÔ∏è\n\n",
    "supporting": [
      "index.en_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}