[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Page that gives more information about me"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Null Hypothesis",
    "section": "",
    "text": "Hi there üëãüèº My name is Ramakant and I am a consumer marketing enthusiast with a natural curiosity towards data and technology. I started this blog as a way to sharpen my data science skills and occasionally pour those creative juices."
  },
  {
    "objectID": "index.html#get-in-touch",
    "href": "index.html#get-in-touch",
    "title": "The Null Hypothesis",
    "section": "Get In Touch ‚úçÔ∏è",
    "text": "Get In Touch ‚úçÔ∏è\nI‚Äôm always on the lookout for a good conversation. Feel free to mail me at d.s.ramakant@gmail.com or check out my Linkedin profile\n\nLink to my resume (broken for now) üìÉ"
  },
  {
    "objectID": "index.html#blog-posts",
    "href": "index.html#blog-posts",
    "title": "The Null Hypothesis",
    "section": "Blog Posts",
    "text": "Blog Posts"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2022-01-14-hello-world2/index.en.html",
    "href": "posts/2022-01-14-hello-world2/index.en.html",
    "title": "Hello World2",
    "section": "",
    "text": "A lot of this is courtesy of Apres Hill‚Äôs blog\nhttps://www.apreshill.com/blog/2020-12-new-year-new-blogdown/#step-1-create-repo"
  },
  {
    "objectID": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html",
    "href": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html",
    "title": "What a wonderful ‚Äòwordle‚Äô!",
    "section": "",
    "text": "Who ever thought that a bunch of black and green boxes would bring out the logophile in us all? With friends and family groups sharing their progress, I find this to be an entertaining mind-puzzle to kickstart the day.\nAnd I was not alone in my quest for 5 letter words. Wordle has tickled the fascination of many in the data science community. I found Arthur Holtz‚Äôs lucid breakdown of the Wordle dataset quite interesting. Of course, there is 3B1B‚Äôs incredibly detailed videos on applying Information Theory to this 6-by-5 grid. (original video as well as the follow-up errata)\nOthers have simulated the wordle game (like here) or even solved it for you (like this blog). I‚Äôve read at least one blog post that has an academic take on the matter.\nFortunately for the reader, none of the above will be attempted by me. My inspiration comes from Gerry Chng‚Äôs Frequency Analysis Approach where I‚Äôve tried to understand the most commonly occuring letters in the official word list by position by considering a ranking mechanism"
  },
  {
    "objectID": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#what-is-a-wordle",
    "href": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#what-is-a-wordle",
    "title": "What a wonderful ‚Äòwordle‚Äô!",
    "section": "What is a wordle?",
    "text": "What is a wordle?\nThe game rules are fairly simple:\n\nYou need to guess a 5-letter word. One new word is given every day\nYou are given 6 guesses\nAfter every guess, each square is coded by a color\n\nGREY: chosen letter is not in the word\nYELLOW: chosen letter is in the word by wrong position\nGREEN: chosen letter is in the word and in the correct position\n\nRepetition of letters is allowed\n\nThat‚Äôs it!\nIn my opinion, one of the reasons for the game going viral is the way the results are shared. You‚Äôve possibly seen something like this floating around:\n\n\n\nSample world share\n\n\n‚Ä¶And if your family too has been bitten hard by the Wordle bug, then you would be familiar with group messages like this!\n\n\n\nWorld share in whatsapp"
  },
  {
    "objectID": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#frequency-analysis",
    "href": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#frequency-analysis",
    "title": "What a wonderful ‚Äòwordle‚Äô!",
    "section": "Frequency analysis",
    "text": "Frequency analysis\nArthur Hotlz‚Äôs blog is a good place to start for extracting and loading the Official Wordle list. After parsing and cleaning the data, here‚Äôs all the words broken down into a single rectangular dataframe word_list .\nUpdate 29th Jan ‚Äô23: NYT‚Äôs .js file is not retrieving any list for some reason. I‚Äôve referred to Arjun Vikram‚Äôs repo on dagshub\n\nknitr::opts_chunk$set(warning = FALSE, message = FALSE) \nsuppressMessages({ \nlibrary(httr)\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(scales)\nlibrary(tidyr)\nlibrary(tibble)\nlibrary(forcats)\nlibrary(knitr)\nlibrary(kableExtra)\ntheme_set(theme_light())\n})\n\nurl <- \"https://www.nytimes.com/games/wordle/main.18637ca1.js\" #not working\nurl2 <- \"https://dagshub.com/arjvik/wordle-wordlist/raw/e8d07d33a59a6b05f3b08bd827385604f89d89a0/answerlist.txt\"\nwordle_script_text <- GET(url2) %>% \n  content(as = \"text\", encoding = \"UTF-8\")\n# word_list = substr(\n#   wordle_script_text,\n#   # cigar is the first word\n#   str_locate(wordle_script_text, \"cigar\")[,\"start\"],\n#   # shave is the last word\n#   str_locate(wordle_script_text, \"shave\")[,\"end\"]) %>%\n#   str_remove_all(\"\\\"\") %>%\n#   str_split(\",\") %>%\n#   data.frame() %>%\n#   select(word = 1) %>%\n#   mutate(word = toupper(word))\n\n\nwordle_list <- str_split(wordle_script_text, \"\\n\")\n\nwordle_list <- data.frame(wordle_list) \n\nwordle_list <- rename(wordle_list, word = names(wordle_list)[1] ) %>% mutate(word = toupper(word)) #renaming column to 'word'\n\ndim(wordle_list)\n\n[1] 2310    1\n\nhead(wordle_list)\n\n   word\n1 CIGAR\n2 REBUT\n3 SISSY\n4 HUMPH\n5 AWAKE\n6 BLUSH\n\n\nModification to the above is another dataframe with each of the characters separated into columns which we‚Äôll call position_word_list\nThe line select(-x) removes the empty column that is created due to the seperate() function\n\nposition_word_list <- wordle_list %>% \n  separate(word, \n           sep = \"\", \n           into = c(\"x\",\"p1\",\"p2\",\"p3\",\"p4\",\"p5\")) %>% \n  select(-x)\nhead(position_word_list,10)\n\n   p1 p2 p3 p4 p5\n1   C  I  G  A  R\n2   R  E  B  U  T\n3   S  I  S  S  Y\n4   H  U  M  P  H\n5   A  W  A  K  E\n6   B  L  U  S  H\n7   F  O  C  A  L\n8   E  V  A  D  E\n9   N  A  V  A  L\n10  S  E  R  V  E\n\n\nNow onto some frequency analysis. Here‚Äôs a breakdown of all the letters in the wordle list sorted by number of occurrences stored in letter_list and creating a simple bar graph.\n\nletter_list <- wordle_list %>%\n  as.character() %>%\n  str_split(\"\") %>% \n  as.data.frame() %>% \n  select(w_letter = 1) %>% \n  filter(row_number()!=1) %>%\n  filter(w_letter %in% LETTERS) %>% \n  mutate(type = case_when(w_letter %in% c(\"A\",\"E\",\"I\",\"O\",\"U\") ~ \"vowel\",\n                          T ~ \"consonant\")) %>% \n  group_by(w_letter, type) %>% \n  summarise(freq = n()) %>% \n  arrange(desc(freq))\n\nletter_list %>% ungroup() %>% \n  ggplot(aes(x = reorder(w_letter, -freq), y = freq))+\n  geom_col(aes(fill = type))+\n  scale_y_continuous(labels = comma)+\n  geom_text(aes(label = freq), \n            size = 3)+\n  labs(x = \"Letter\", y = \"Frequency\",\n       title = \"Frequency of letters in Official Wordle list\")\n\n\n\n\nThis is interesting. Now I‚Äôm curious to know the top words by each position. To do this, I created a single table called freq_table that provides me with the frequency of occurrences by position for each letter. To iterate this process across all the 5 places, I used a for loop. Output is generated via the kableExtra package which provides a neat scrollable window\n\n#declaring null table\nfreq_table <- tibble(alpha = LETTERS)\n\nfor(i in 1:5){\n    test <- position_word_list %>% \n    select(all_of(i)) %>%\n# group_by_at() used for column index ID\n    group_by_at(1) %>% \n    summarise(f = n()) %>% \n    arrange(desc(f)) %>% \n#first column returns p1, p2.. etc and is standardised\n    rename(a = 1) \n\n#adding the freq values to a new dataframe\n    freq_table <- freq_table %>%\n    left_join(test, by = c(\"alpha\" = \"a\")) \n\n#renaming column name to reflect the position number\n    colnames(freq_table)[1+i] = paste0(\"p\",i)\n    rm(test)\n}\n#replacing NA with zero\nfreq_table[is.na(freq_table)] <- 0 \n#output using kable's scrollable window \nkable(freq_table, \n      format = \"html\", \n      caption = \"Frequency Table\") %>%\n    kable_styling() %>%\n    scroll_box(width = \"70%\", height = \"300px\") %>% \n  kable_classic()\n\n\n\nFrequency Table\n \n  \n    alpha \n    p1 \n    p2 \n    p3 \n    p4 \n    p5 \n  \n \n\n  \n    A \n    140 \n    304 \n    306 \n    162 \n    63 \n  \n  \n    B \n    173 \n    16 \n    56 \n    24 \n    11 \n  \n  \n    C \n    198 \n    40 \n    56 \n    150 \n    31 \n  \n  \n    D \n    111 \n    20 \n    75 \n    69 \n    118 \n  \n  \n    E \n    72 \n    241 \n    177 \n    318 \n    422 \n  \n  \n    F \n    135 \n    8 \n    25 \n    35 \n    26 \n  \n  \n    G \n    115 \n    11 \n    67 \n    76 \n    41 \n  \n  \n    H \n    69 \n    144 \n    9 \n    28 \n    137 \n  \n  \n    I \n    34 \n    201 \n    266 \n    158 \n    11 \n  \n  \n    J \n    20 \n    2 \n    3 \n    2 \n    0 \n  \n  \n    K \n    20 \n    10 \n    12 \n    55 \n    113 \n  \n  \n    L \n    87 \n    200 \n    112 \n    162 \n    155 \n  \n  \n    M \n    107 \n    38 \n    61 \n    68 \n    42 \n  \n  \n    N \n    37 \n    87 \n    137 \n    182 \n    130 \n  \n  \n    O \n    41 \n    279 \n    243 \n    132 \n    58 \n  \n  \n    P \n    141 \n    61 \n    57 \n    50 \n    56 \n  \n  \n    Q \n    23 \n    5 \n    1 \n    0 \n    0 \n  \n  \n    R \n    105 \n    267 \n    163 \n    150 \n    212 \n  \n  \n    S \n    365 \n    16 \n    80 \n    171 \n    36 \n  \n  \n    T \n    149 \n    77 \n    111 \n    139 \n    253 \n  \n  \n    U \n    33 \n    185 \n    165 \n    82 \n    1 \n  \n  \n    V \n    43 \n    15 \n    49 \n    45 \n    0 \n  \n  \n    W \n    82 \n    44 \n    26 \n    25 \n    17 \n  \n  \n    X \n    0 \n    14 \n    12 \n    3 \n    8 \n  \n  \n    Y \n    6 \n    22 \n    29 \n    3 \n    364 \n  \n  \n    Z \n    3 \n    2 \n    11 \n    20 \n    4 \n  \n\n\n\n\n\nThis table looks good. However, for my visualisation, I want to plot the top 10 letters in each position. For this, I‚Äôm going to use pivot_longer() to make it easier to generate the viz.\n\nfreq_table_long10 <- freq_table %>% \n  pivot_longer(cols = !alpha, names_to = \"position\", values_to = \"freq\") %>% \n  select(position, alpha, freq) %>% \n  arrange(position, -freq) %>% \n  group_by(position) %>% \n  slice_head(n = 10) %>% ungroup\n\nkable(freq_table_long10, \n      format = \"html\", \n      caption = \"Top 10 letters within each position\") %>%\n    kable_styling() %>%\n    scroll_box(height = \"200px\") %>% \n  kable_classic()\n\n\n\nTop 10 letters within each position\n \n  \n    position \n    alpha \n    freq \n  \n \n\n  \n    p1 \n    S \n    365 \n  \n  \n    p1 \n    C \n    198 \n  \n  \n    p1 \n    B \n    173 \n  \n  \n    p1 \n    T \n    149 \n  \n  \n    p1 \n    P \n    141 \n  \n  \n    p1 \n    A \n    140 \n  \n  \n    p1 \n    F \n    135 \n  \n  \n    p1 \n    G \n    115 \n  \n  \n    p1 \n    D \n    111 \n  \n  \n    p1 \n    M \n    107 \n  \n  \n    p2 \n    A \n    304 \n  \n  \n    p2 \n    O \n    279 \n  \n  \n    p2 \n    R \n    267 \n  \n  \n    p2 \n    E \n    241 \n  \n  \n    p2 \n    I \n    201 \n  \n  \n    p2 \n    L \n    200 \n  \n  \n    p2 \n    U \n    185 \n  \n  \n    p2 \n    H \n    144 \n  \n  \n    p2 \n    N \n    87 \n  \n  \n    p2 \n    T \n    77 \n  \n  \n    p3 \n    A \n    306 \n  \n  \n    p3 \n    I \n    266 \n  \n  \n    p3 \n    O \n    243 \n  \n  \n    p3 \n    E \n    177 \n  \n  \n    p3 \n    U \n    165 \n  \n  \n    p3 \n    R \n    163 \n  \n  \n    p3 \n    N \n    137 \n  \n  \n    p3 \n    L \n    112 \n  \n  \n    p3 \n    T \n    111 \n  \n  \n    p3 \n    S \n    80 \n  \n  \n    p4 \n    E \n    318 \n  \n  \n    p4 \n    N \n    182 \n  \n  \n    p4 \n    S \n    171 \n  \n  \n    p4 \n    A \n    162 \n  \n  \n    p4 \n    L \n    162 \n  \n  \n    p4 \n    I \n    158 \n  \n  \n    p4 \n    C \n    150 \n  \n  \n    p4 \n    R \n    150 \n  \n  \n    p4 \n    T \n    139 \n  \n  \n    p4 \n    O \n    132 \n  \n  \n    p5 \n    E \n    422 \n  \n  \n    p5 \n    Y \n    364 \n  \n  \n    p5 \n    T \n    253 \n  \n  \n    p5 \n    R \n    212 \n  \n  \n    p5 \n    L \n    155 \n  \n  \n    p5 \n    H \n    137 \n  \n  \n    p5 \n    N \n    130 \n  \n  \n    p5 \n    D \n    118 \n  \n  \n    p5 \n    K \n    113 \n  \n  \n    p5 \n    A \n    63 \n  \n\n\n\n\n\nSo we have the # of occurences in each position laid out in a tidy format in one long rectangular dataframe. Now sprinkling some magic courtesy ggplot\n\nSide note on reordering within facets\nI tried my best to understand why I was unable to sort within each facet in spite of using free_y. Apparently that‚Äôs a known issue and a workaround has been discussed by David Robinson, Julia Silger and Tyler Rinker. To achieve this, two more functions need to be created reorder_within and scale_y_reordered\n\nreorder_within <- function(x, by, within, fun = mean, sep = \"___\", ...) {\n  new_x <- paste(x, within, sep = sep)\n  stats::reorder(new_x, by, FUN = fun)\n}\n\nscale_y_reordered <- function(..., sep = \"___\") {\n  reg <- paste0(sep, \".+$\")\n  ggplot2::scale_y_discrete(labels = function(x) gsub(reg, \"\", x), ...)\n}\n\nfreq_table_long10 %>% \n  mutate(type = case_when(alpha %in% c(\"A\",\"E\",\"I\",\"O\",\"U\") ~ \"vowel\",\n                          T ~ \"consonant\")) %>% \n  ggplot(aes(y = reorder_within(alpha, freq, position), x = freq))+\n  geom_col(aes(fill = type))+\n  scale_y_reordered()+\n  facet_wrap(~position, \n             scales = \"free_y\", \n             ncol = 5)+\n  labs(x = \"Frequency\", y = \"Letter\",\n       title = \"Frequency of top 10 letters by position in Official Wordle list \",\n       caption = \"D.S.Ramakant Raju\\nwww.linkedin.com/in/dsramakant/\")\n\n\n\n\nAha! Things are starting to get more clearer. Highly common letters in the 1st position are S, C, B, T and P - notice there‚Äôs only 1 vowel (A) that occurs in the top 10. Vowels appear more frequently in the 2nd and 3rd positions. Last position has a higher occurrence of E, Y, T, R & L"
  },
  {
    "objectID": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#which-words-can-be-the-best-worlde-openers",
    "href": "posts/2022-04-05-what-a-wonderful-wordle/index.en.html#which-words-can-be-the-best-worlde-openers",
    "title": "What a wonderful ‚Äòwordle‚Äô!",
    "section": "Which words can be the best Worlde openers?",
    "text": "Which words can be the best Worlde openers?\nArmed with the above knowledge, we now can filter out the commonly occurring words. Also I use a naive method to rank these words basis the occurrence of the letters. For instance, in the picture above, the word S A I N T seems to be a valid word comprising of the top occurring letters.\nAdmittedly, I use a pretty crude method to determine the best openers. Known drawbacks of this methodology are:\n\nDoesn‚Äôt consider the future path of the word (number of steps to get to the right word)\nOnly considers the rank of the letters and not the actual probability of occurrence\n\nWith that out of the way, I was able to determine that there are 39 words that can be formed with the top 5 occurring letters in each position. I‚Äôve created a score that is determined by the rank of each letter within its position. For instance, S A I N T gets a score of 9 by summing up 1 (S in first position) + 1 (A in second position) + 2 (I in third) + 2 (N in fourth) + 3 (T in fifth). The lower the score, the higher the frequency of occurrences. Scroll below to read the rest of the words.\n\n#function to pick the top 5 letters\ntop5_selection <- function(x)\n{x %>% arrange(desc(x[2])) %>% head(5) %>% select(1)}\n#defining null table\nfinal_grid <- tibble(ranking = 1:5)\n\nfor(i in 2:length(freq_table)){\n  t <- top5_selection(select(freq_table,1,all_of(i)))\n  final_grid <- cbind(final_grid,t)\n  colnames(final_grid)[i] = paste0(\"p\",i-1)\n}\ntopwords <- position_word_list %>% \nfilter(p1 %in% final_grid$p1,\n       p2 %in% final_grid$p2,\n       p3 %in% final_grid$p3,\n       p4 %in% final_grid$p4,\n       p5 %in% final_grid$p5) \n\n#finding consolidated score of each word\ntopwords %<>%\n  rowwise() %>% \n  mutate(p1_rank = which(p1 == final_grid$p1),\n         p2_rank = which(p2 == final_grid$p2),\n         p3_rank = which(p3 == final_grid$p3),\n         p4_rank = which(p4 == final_grid$p4),\n         p5_rank = which(p5 == final_grid$p5))\n\ntopwords2 <- topwords %>% \n  transmute(word = paste0(p1,p2,p3,p4,p5),\n         score = sum(p1_rank, p2_rank,p3_rank, p4_rank, p5_rank)) %>% \n  arrange(score)\n\nkable(topwords2, \n      format = \"html\",\n      caption = \"Top 39 words\") %>%\n    kable_styling() %>%\n    scroll_box(width = \"50%\", height = \"400px\") %>% \n  kable_classic()\n\n\n\nTop 39 words\n \n  \n    word \n    score \n  \n \n\n  \n    SAINT \n    9 \n  \n  \n    CRANE \n    9 \n  \n  \n    COAST \n    11 \n  \n  \n    BRINE \n    11 \n  \n  \n    CEASE \n    11 \n  \n  \n    CRONE \n    11 \n  \n  \n    CAUSE \n    12 \n  \n  \n    CRIER \n    12 \n  \n  \n    BRINY \n    12 \n  \n  \n    BOAST \n    12 \n  \n  \n    TAINT \n    12 \n  \n  \n    CRONY \n    12 \n  \n  \n    TEASE \n    13 \n  \n  \n    POISE \n    13 \n  \n  \n    TOAST \n    13 \n  \n  \n    PAINT \n    13 \n  \n  \n    BOOST \n    14 \n  \n  \n    POINT \n    14 \n  \n  \n    COUNT \n    14 \n  \n  \n    PRONE \n    14 \n  \n  \n    BEAST \n    14 \n  \n  \n    PRINT \n    15 \n  \n  \n    PAUSE \n    15 \n  \n  \n    TAUNT \n    15 \n  \n  \n    PROSE \n    15 \n  \n  \n    CREST \n    15 \n  \n  \n    CRUST \n    16 \n  \n  \n    BRIAR \n    16 \n  \n  \n    BOULE \n    16 \n  \n  \n    POESY \n    16 \n  \n  \n    CRUEL \n    16 \n  \n  \n    PRUNE \n    16 \n  \n  \n    BRUNT \n    16 \n  \n  \n    TRUER \n    17 \n  \n  \n    TREAT \n    18 \n  \n  \n    TRIAL \n    18 \n  \n  \n    TRUST \n    18 \n  \n  \n    TRULY \n    19 \n  \n  \n    TROLL \n    20 \n  \n\n\n\n\n\nThere we have it. My take on the best opening words.\nI‚Äôve used words such as SAINT, CRANE, COAST etc and they‚Äôve been reasonably useful to me.\nWhich are your favourite opening words? Please do leave a comment to let me know!"
  }
]