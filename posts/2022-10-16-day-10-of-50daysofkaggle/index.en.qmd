---
title: 'Day 10 of #50daysofkaggle'
author: ''
date: "2022-10-16"
slug: "day-10-of-50daysofkaggle"
categories: [kaggle]
subtitle: Support Vector Machines
summary: Classification through SVM
authors: [Me]
lastmod: "2022-10-18T10:40:27+05:30"
featured: no
image: titanic_SVM.jpg
#removes warning messages
execute: 
  warning: true
#enabling folding code blocks, title of contents on upper-right & left border for code
format: 
  html: 
    code-fold: true
    code-block-border-left: true
    toc: true
---

# Day 10: Titanic Dataset

Part of an ongoing series to [familiarise working on kaggle](https://www.ds-ramakant.com/tag/50daysofkaggle/)

Progress till date:

-   Download titanic dataset and assign to `train` & `test`
-   Rearranging the data
-   EDA (including plots and finding survival rate using `.groupby()`)
-   Modelling
-   Data preparation - one-hot encoding the `Sex`, `Pclass` & `Embarked` columns - appending these to the numerical columns - normalising the data - splitting between `train` into `X_train`, `y_train`, `X_test`, `y_test`
-   Applying KNN algo
    -   finding the right K based on accuracy. (best at K = 7)
    -   Calculating the accuracy based on `test`
-   Applying Decision Trees algo
    -   with `criterion = entropy` and `max_depth = 3`
    -   sligthly better accuracy in prediction than KNN

To do today: - classification using Support Vector Machines algo

## Reading the data

Reading and printing the top 5 rows

```{python}
import numpy as np
import pandas as pd
import zipfile

#importing the zipfile already saved in the other folder. 
zf = zipfile.ZipFile("../2022-10-12-day-6-of-50daysofkaggle/titanic.zip")
train = pd.read_csv(zf.open("train.csv"))
test = pd.read_csv(zf.open("test.csv"))

#Selecting only the numerical columns
num_col = train.select_dtypes(include=np.number).columns.tolist()

#deslecting passenger ID and 'Survived' 
del num_col[0:2] #.remove() can remove only 1 item. so for more than 1, use for loop 
select_col = num_col

#remaining columns
str_col= ["Sex", "Embarked", "Survived"]
#Adding more elements into a list using `extend` and not `append`
select_col.extend(str_col)

train_eda= train[train.columns.intersection(select_col)]
train_eda
```

## Cleaning up the data

Checking all `na` values in the existing dataset.

```{python}
train_eda.isna().sum().sort_values()
```

Replacing empty cells with median age (28)

```{python}
median_age = train_eda.Age.median() #28
train_eda.loc[train_eda.Age.isna(), "Age"] = median_age #.loc returns the view and doesn't throw warning msg
train_eda.isna().sum().sort_values()
```

## Model Building

Seperating X & y

```{python}
train_eda = train_eda.dropna(axis = 0) #removing all rows with NA

X = train_eda[["Age", "SibSp", "Parch", "Fare"]]
X = pd.concat([X,pd.get_dummies(data = train_eda[["Sex", "Embarked", "Pclass"]], columns = ["Sex", "Embarked", "Pclass"])], axis = 1)

y = train_eda["Survived"].values
```

### Normalising the data

Transform `X` and printing the first 5 datapoints

```{python}
from sklearn import preprocessing

X= preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]
```

### Splitting into Test & Train data

Splitting into `test` & `train` data and comparing the dimensions.

```{python}

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4)
print ('Train set\t :', X_train.shape,  y_train.shape,
'\nTest set\t :', X_test.shape,  y_test.shape)


```

## Support Vector Machines

Lets check the classification results using SVM. First 10 are as follows:

```{python}
from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(X_train, y_train) 

yhat_svm = clf.predict(X_test)

print("First 10 actual\t\t:", y_test[0:10],"\nFirst 10 predicted\t:", yhat_svm[0:10])

```

### Confusion matrix using SVM

```{python}
from sklearn.metrics import classification_report, confusion_matrix
import itertools

# Compute confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat_svm)
np.set_printoptions(precision=2)

print (classification_report(y_test, yhat_svm))
```

### Checking the accuracy

```{python}
from sklearn import metrics

print("SVM Accuracy\t:", metrics.accuracy_score(y_test, yhat_svm),"\nRMSE\t\t\t:", metrics.mean_squared_error(y_test,yhat_svm),"\nNormalised RMSE\t:", metrics.mean_squared_error(y_test,yhat_svm)/np.std(y_test))
```

Achieved **81%** accuracy using SVM with **RMSE of 0.1911**. This is is not as good as Decision Trees which resulted in [RMSE of 0.168](https://www.ds-ramakant.com/post/day-8-of-kaggle/)

Therefore after 10 days of struggle, I have come to the conclusion that Decision Trees is a good classification algorithm for the Titanic dataset.
